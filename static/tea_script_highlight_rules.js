/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from C:/Users/Axel/Documents/github/teascript-highlight/sublime/tea.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

ace.define("ace/mode/teascript-hl-rules", [], function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var TeaScriptHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            include: "#expr"
        }],
        "#expr": [{
            include: "#comment"
        }, {
            include: "#keyword"
        }, {
            include: "#operator"
        }, {
            include: "#string"
        }, {
            include: "#number"
        }, {
            include: "#regex"
        }, {
            include: "#arrow"
        }, {
            include: "#function"
        }, {
            include: "#object"
        }, {
            include: "#array"
        }, {
            include: "#parens"
        }, {
            include: "#comprehension"
        }, {
            include: "#constants"
        }, {
            include: "#named-arg"
        }, {
            include: "#words"
        }],
        "#arg-list": [{
            token: ["keyword", "text.html"],
            regex: /(\s*args\s+)(\{)/,
            push: [{
                token: "text.html",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#arg-name"
            }, {
                defaultToken: "keyword"
            }]
        }],
        "#arg-name": [{
            token: "variable.parameter",
            regex: /(?:[a-zA-Z][a-zA-Z0-9_\$]*\s+)?\{/,
            push: [{
                token: "variable.parameter",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#arg-name"
            }, {
                defaultToken: "variable.parameter"
            }]
        }, {
            token: "variable.parameter",
            regex: /[a-zA-Z][a-zA-Z0-9_\$]*/
        }],
        "#argument": [{
            token: "variable.parameter",
            regex: /@[a-zA-Z\$][a-zA-Z0-9_\$]*/
        }],
        "#array": [{
            token: "text.array",
            regex: /(?<=\s)\[/,
            push: [{
                token: "text.array",
                regex: /\]/,
                next: "pop"
            }, {
                include: "#expr"
            }, {
                defaultToken: "text.array"
            }]
        }],
        "#arrow": [{
            token: "keyword",
            regex: /=>/
        }],
        "#code-block": [{
            token: "text.code-block",
            regex: /\{/,
            push: [{
                token: "text.code-block",
                regex: /(?=\})/,
                next: "pop"
            }, {
                include: "#expr"
            }, {
                defaultToken: "text.code-block"
            }]
        }],
        "#comment": [{
            token: "comment.line",
            regex: /###/,
            push: [{
                token: "comment.line",
                regex: /###/,
                next: "pop"
            }, {
                defaultToken: "comment.line"
            }]
        }, {
            token: "comment.line",
            regex: /#/,
            push: [{
                token: "comment.line",
                regex: /(?=$)/,
                next: "pop"
            }, {
                defaultToken: "comment.line"
            }]
        }],
        "#comprehension": [{
            token: [
                "entity.name.function",
                "text",
                "variable.parameter",
                "text"
            ],
            regex: /(from)(\s+)([a-zA-Z][a-zA-Z0-9_\$]*)(\s+:)/
        }],
        "#constants": [{
            token: "constant.language",
            regex: /\b(?:true|false|null|void)\b/
        }],
        "#function": [{
            token: [
                "keyword",
                "keyword",
                "entity.name.function",
                "text.html"
            ],
            regex: /((?:async\s+)?)(fn\*?\s+)((?:[a-zA-Z\$][a-zA-Z0-9_\$]*\s+)?)(\{)/,
            push: [{
                token: "text.html",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#argument"
            }, {
                include: "#expr"
            }, {
                defaultToken: "keyword"
            }]
        }, {
            token: [
                "keyword",
                "keyword",
                "text.html",
                "constant.language",
                "constant.language",
                "text.html"
            ],
            regex: /((?:async\s+)?)(fn\*?)(?:(\{)([a-zA-Z\$][a-zA-Z0-9_\$]*)((?:,\s*[a-zA-Z\$][a-zA-Z0-9_\$]*)*)(\}))?/
        }, {
            token: [
                "keyword",
                "keyword",
                "variable.parameter",
                "keyword"
            ],
            regex: /((?:async\s+)?)(fn\*?\s+)([a-zA-Z][a-zA-Z0-9_\$]*)(\s+)(?==>)/,
            push: [{
                token: "keyword",
                regex: /(?=$)/,
                next: "pop"
            }, {
                include: "#expr"
            }, {
                defaultToken: "keyword"
            }]
        }],
        "#keyword": [{
            token: "keyword",
            regex: /=>|debugger|do/
        }, {
            token: "keyword",
            regex: /for\s+(?:ever|await)?|\@catch|if|safeguard(?:\^)?|guard/,
            push: [{
                token: "text.html",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#code-block"
            }, {
                include: "#expr"
            }, {
                defaultToken: "keyword"
            }]
        }, {
            token: "keyword",
            regex: /\@finally|try/,
            push: [{
                token: "text.html",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#code-block"
            }, {
                defaultToken: "keyword"
            }]
        }, {
            token: ["keyword", "text.html"],
            regex: /(export\s+)(\{)/,
            push: [{
                token: "text.html",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#keyword-export-entry"
            }, {
                defaultToken: "keyword"
            }]
        }, {
            token: ["keyword", "entity.name.function"],
            regex: /^(export )((?:default )?)/
        }, {
            token: "keyword",
            regex: /\b(?:yield|await|let|mut)\b/
        }, {
            token: [
                "keyword",
                "entity.name.function",
                "variable.parameter constant.language",
                "entity.name.function",
                "keyword",
                "keyword"
            ],
            regex: /^(\s*import\s+)(\{)([^\}]+)(\})(\s)(from)/
        }, {
            token: [
                "keyword",
                "variable.parameter constant.language",
                "keyword",
                "keyword"
            ],
            regex: /^(\s*import\s+)([^\s]+)(\s)(from)/
        }, {
            token: [
                "keyword",
                "entity.name.function",
                "keyword",
                "variable.parameter constant.language",
                "keyword",
                "keyword"
            ],
            regex: /^(\s*import\s)(\*)(\sas\s+)([^\s]+)(\s)(from)/
        }, {
            token: "keyword",
            regex: /^\s*import\s(?=")/
        }],
        "#keyword-export-entry": [{
            token: [
                "entity.name.tag",
                "text.export-block",
                "entity.name.function",
                "text.export-block",
                "variable.parameter"
            ],
            regex: /([a-zA-Z\$][a-zA-Z0-9_\$]*)(\s+)(as)(\s+)([a-zA-Z\$][a-zA-Z0-9_\$]*)/
        }, {
            token: "variable.parameter",
            regex: /[a-zA-Z\$][a-zA-Z0-9_\$]*/
        }],
        "#named-arg": [{
            token: "variable.parameter",
            regex: /:[a-zA-Z][a-zA-Z0-9_\$]*/
        }],
        "#number": [{
            token: "constant.numeric",
            regex: /\-?\d+(?:\.\d+)?(?:(?:e|E)(?:\+|\-)?\d+)?/
        }],
        "#object": [{
            token: "text.html",
            regex: /\{/,
            push: [{
                token: "text.html",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#object-key"
            }, {
                include: "#expr"
            }, {
                defaultToken: "text.html"
            }]
        }],
        "#object-key": [{
            token: "variable.parameter",
            regex: /:\(/,
            push: [{
                token: "variable.parameter",
                regex: /\)/,
                next: "pop"
            }, {
                include: "#expr"
            }, {
                defaultToken: "variable.parameter"
            }]
        }, {
            token: "variable.parameter",
            regex: /:/,
            push: [{
                token: "variable.parameter",
                regex: /\s/,
                next: "pop"
            }, {
                include: "#expr"
            }, {
                defaultToken: "variable.parameter"
            }]
        }],
        "#operator": [{
            token: "entity.name.function",
            regex: /(?:<<<|>>>|<<|>>|<\+|\+>|\|\|?|&&?|\*\*?|%|(?:=|!)=|=|<|\-?>|\-|\+|\/|:)[\s\r$]/
        }, {
            token: "entity.name.function",
            regex: /\.\.\./
        }, {
            token: "keyword",
            regex: /&(?=\w)/
        }, {
            token: "entity.name.function",
            regex: /(?:await|typeof|delete)\{/,
            push: [{
                token: "entity.name.function",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#expr"
            }, {
                defaultToken: "entity.name.function"
            }]
        }, {
            token: "entity.name.function",
            regex: /(?:\!|\~|\-|\?\??)\(/,
            push: [{
                token: "entity.name.function",
                regex: /\)/,
                next: "pop"
            }, {
                include: "#expr"
            }, {
                defaultToken: "entity.name.function"
            }]
        }, {
            token: "entity.name.function",
            regex: /instance</,
            push: [{
                token: "entity.name.function",
                regex: />/,
                next: "pop"
            }, {
                include: "#expr"
            }, {
                defaultToken: "entity.name.function"
            }]
        }],
        "#parens": [{
            token: "text.html",
            regex: /(?<=\s)\(/,
            push: [{
                token: "text.html",
                regex: /\)/,
                next: "pop"
            }, {
                include: "#expr"
            }, {
                defaultToken: "text.html"
            }]
        }],
        "#regex": [{
            token: "string.regexp",
            regex: /\//,
            push: [{
                token: ["string.regexp", "string.template"],
                regex: /(\/)(\w*)/,
                next: "pop"
            }, {
                include: "#string-escapes"
            }, {
                defaultToken: "string.regexp"
            }]
        }],
        "#string": [{
            token: "string.template",
            regex: /"/,
            push: [{
                token: "string.template",
                regex: /"/,
                next: "pop"
            }, {
                include: "#string-interpolation"
            }, {
                include: "#string-escapes"
            }, {
                defaultToken: "string.template"
            }]
        }],
        "#string-escapes": [{
            token: "constant.character.escape",
            regex: /\\(?:x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\{[0-9A-Fa-f]+\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|#)/
        }],
        "#string-interpolation": [{
            token: "constant.character.escape",
            regex: /#\{/,
            push: [{
                token: "constant.character.escape",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#expr"
            }, {
                defaultToken: "meta.embedded.line"
            }]
        }],
        "#template": [{
            token: [
                "entity.name.function.tagged-template.js",
                "punctuation.definition.string.template.begin.js"
            ],
            regex: /((?:[_$[:alpha:]][_$[:alnum:]]*)?)(`)/,
            push: [{
                token: "punctuation.definition.string.template.end.js",
                regex: /`/,
                next: "pop"
            }, {
                defaultToken: "string.template.js"
            }]
        }],
        "#words": [{
            token: ["entity.name.tag", "text.html"],
            regex: /([a-zA-Z\$][a-zA-Z0-9_\$]*)(\()/,
            push: [{
                token: "text.html",
                regex: /\)/,
                next: "pop"
            }, {
                include: "#expr"
            }, {
                defaultToken: "text.normal"
            }]
        }, {
            token: "entity.name.tag",
            regex: /[a-zA-Z\$][a-zA-Z0-9_\$]*/
        }, {
            token: [
                "text.normal",
                "text.normal",
                "entity.name.function",
                "text.normal",
                "text.normal"
            ],
            regex: /(\??)(\.)([a-zA-Z\$][a-zA-Z0-9_\$]*)(\??)(\()/,
            push: [{
                token: "text.normal",
                regex: /\)/,
                next: "pop"
            }, {
                include: "#expr"
            }, {
                defaultToken: "text.normal"
            }]
        }, {
            token: [
                "support.variable.property",
                "text.normal",
                "support.variable.property"
            ],
            regex: /(\??)(\.)([a-zA-Z\$][a-zA-Z0-9_\$]*)/
        }, {
            token: "support.variable.property",
            regex: /(?<=\w)\??\[/,
            push: [{
                token: "support.variable.property",
                regex: /\]/,
                next: "pop"
            }, {
                include: "#expr"
            }, {
                defaultToken: "support.variable.property"
            }]
        }]
    }

    this.normalizeRules();
};

TeaScriptHighlightRules.metaData = {
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    name: "TeaScript",
    scopeName: "source.tea"
}


oop.inherits(TeaScriptHighlightRules, TextHighlightRules);

exports.TeaScriptHighlightRules = TeaScriptHighlightRules;
});
